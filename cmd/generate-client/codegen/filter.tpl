// Code generated by generate-client. DO NOT EDIT.

package {{ .Package.Name }}

import (
    {{- range $name, $group := .Groups }}
    {{ $group.Package.Alias }} {{ $group.Package.Path | quote }}
    {{- end }}
    "github.com/onosproject/helm-go/pkg/kubernetes/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	helmkube "helm.sh/helm/v3/pkg/kube"
	"k8s.io/apimachinery/pkg/api/errors"
)

func Resources(client resource.Client, resources helmkube.ResourceList) resource.Filter {
	return func(kind metav1.GroupVersionKind, meta metav1.ObjectMeta) (bool, error) {
		return filterResources(client, resources, kind, meta)
	}
}

func filterResources(client resource.Client, resources helmkube.ResourceList, kind metav1.GroupVersionKind, meta metav1.ObjectMeta) (bool, error) {
	for _, resource := range resources {
		resourceKind := resource.Object.GetObjectKind().GroupVersionKind()
		if resourceKind.Group == kind.Group &&
			resourceKind.Version == kind.Version &&
			resourceKind.Kind == kind.Kind &&
			resource.Namespace == meta.Namespace &&
			resource.Name == meta.Name {
			return true, nil
		}
	}
	return filterOwners(client, resources, kind, meta)
}

func filterOwners(client resource.Client, resources helmkube.ResourceList, kind metav1.GroupVersionKind, meta metav1.ObjectMeta) (bool, error) {
	for _, owner := range meta.OwnerReferences {
		ok, err := filterOwner(client, resources, owner)
		if ok {
			return true, nil
		} else if err != nil {
			return false, err
		}
	}
	return filterApp(client, resources, kind, meta)
}

func filterOwner(client resource.Client, resources helmkube.ResourceList, owner metav1.OwnerReference) (bool, error) {
	for _, resource := range resources {
		resourceKind := resource.Object.GetObjectKind().GroupVersionKind()
		if resourceKind.Kind == owner.Kind &&
			resourceKind.GroupVersion().String() == owner.APIVersion &&
			resource.Name == owner.Name {
			return true, nil
		}
	}

    switch owner.APIVersion {
    {{- range $groupName, $group := .Groups }}
    case "{{ $group.Group }}/{{ $group.Version }}":
        switch owner.Kind {
        {{- range $resourceName, $resource := $group.Resources }}
        case "{{ $resource.Resource.Kind.Kind }}":
            {{- $name := ($resource.Resource.Names.Singular | toLowerCamel) }}
            {{ $name }}Client := {{ $resource.Resource.Kind.Package.Alias }}.New{{ $resource.Reader.Types.Interface }}(client, resource.NoFilter)
            {{ $name }}, err := {{ $name }}Client.Get(owner.Name)
            if err != nil && !errors.IsNotFound(err) {
                return false, err
            } else if err == nil {
                groupVersionKind := metav1.GroupVersionKind{
                    Group:   {{ $resource.Resource.Kind.Package.Alias }}.{{ $resource.Resource.Types.Kind }}.Group,
                    Version: {{ $resource.Resource.Kind.Package.Alias }}.{{ $resource.Resource.Types.Kind }}.Version,
                    Kind:    {{ $resource.Resource.Kind.Package.Alias }}.{{ $resource.Resource.Types.Kind }}.Kind,
                }
                ok, err := filterResources(client, resources, groupVersionKind, {{ $name }}.Object.ObjectMeta)
                if ok {
                    return true, nil
                } else if err != nil {
                    return false, err
                }
            }
        {{- end }}
        }
    {{- end }}
    }
	return false, nil
}

func filterApp(client resource.Client, resources helmkube.ResourceList, kind metav1.GroupVersionKind, meta metav1.ObjectMeta) (bool, error) {
    {{- range $groupName, $group := .Groups }}
    {{- range $resourceName, $resource := $group.Resources }}
    {{- range $referenceName, $reference := $resource.Resource.References }}
    {{- $name := ($resource.Resource.Names.Singular | toLowerCamel) }}
    if isSameKind(kind, {{ $reference.Resource.Package.Alias }}.{{ $reference.Resource.Types.Kind }}) {
        instance, ok := meta.Labels["app.kubernetes.io/instance"]
        if ok {
            {{ $name }}Client := {{ $resource.Resource.Kind.Package.Alias }}.New{{ $resource.Reader.Types.Interface }}(client, resource.NoFilter)
            {{ $name }}, err := {{ $name }}Client.Get(instance)
            if err != nil && !errors.IsNotFound(err) {
                return false, err
            } else if err == nil {
                groupVersionKind := metav1.GroupVersionKind{
                    Group:   {{ $resource.Resource.Kind.Package.Alias }}.{{ $resource.Resource.Types.Kind }}.Group,
                    Version: {{ $resource.Resource.Kind.Package.Alias }}.{{ $resource.Resource.Types.Kind }}.Version,
                    Kind:    {{ $resource.Resource.Kind.Package.Alias }}.{{ $resource.Resource.Types.Kind }}.Kind,
                }
                return filterResources(client, resources, groupVersionKind, {{ $name }}.Object.ObjectMeta)
            }
        }
    }
    {{- end }}
    {{- end }}
    {{- end }}
    return false, nil
}

func isSameKind(groupVersionKind metav1.GroupVersionKind, kind resource.Kind) bool {
	return groupVersionKind.Group == kind.Group &&
		groupVersionKind.Version == kind.Version &&
		groupVersionKind.Kind == kind.Kind
}
